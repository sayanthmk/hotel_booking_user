// // lib/domain/entities/report_issue.dart
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:flutter/material.dart';
// import 'package:flutter_bloc/flutter_bloc.dart';
// import 'package:get_it/get_it.dart';

// class ReportIssue {
//   final String id;
//   final String issue;
//   final DateTime? timestamp;
//   final String userId;

//   ReportIssue({
//     required this.id,
//     required this.issue,
//     this.timestamp,
//     required this.userId,
//   });
// }

// // lib/data/models/report_issue_model.dart
// class ReportIssueModel extends ReportIssue {
//   ReportIssueModel({
//     required super.id,
//     required super.issue,
//     super.timestamp,
//     required super.userId,
//   });

//   factory ReportIssueModel.fromEntity(ReportIssue entity) {
//     return ReportIssueModel(
//       id: entity.id,
//       issue: entity.issue,
//       timestamp: entity.timestamp,
//       userId: entity.userId,
//     );
//   }

//   factory ReportIssueModel.fromJson(Map<String, dynamic> json, String id) {
//     return ReportIssueModel(
//       id: id,
//       issue: json['issue'] as String? ?? 'Unknown Issue',
//       timestamp: (json['timestamp'] as Timestamp?)?.toDate(),
//       userId: json['userId'] as String? ?? '',
//     );
//   }

//   Map<String, dynamic> toJson() {
//     return {
//       'issue': issue,
//       'timestamp': FieldValue.serverTimestamp(),
//       'userId': userId,
//     };
//   }
// }

// // lib/data/datasources/report_issue_remote_data_source.dart
// abstract class ReportIssueRemoteDataSource {
//   Future<void> addIssue(ReportIssueModel issue);
//   Stream<List<ReportIssueModel>> getIssues(String userId);
// }

// class FirebaseReportIssueDataSource implements ReportIssueRemoteDataSource {
//   final FirebaseFirestore firestore;

//   FirebaseReportIssueDataSource({required this.firestore});

//   @override
//   Future<void> addIssue(ReportIssueModel issue) async {
//     await firestore
//         .collection('users')
//         .doc(issue.userId)
//         .collection('reports')
//         .add(issue.toJson());
//   }

//   @override
//   Stream<List<ReportIssueModel>> getIssues(String userId) {
//     return firestore
//         .collection('users')
//         .doc(userId)
//         .collection('reports')
//         .orderBy('timestamp', descending: true)
//         .snapshots()
//         .map((snapshot) => snapshot.docs
//             .map((doc) => ReportIssueModel.fromJson(doc.data(), doc.id))
//             .toList());
//   }
// }

// // lib/domain/repositories/report_issue_repository.dart
// abstract class ReportIssueRepository {
//   Future<void> addIssue(String issue);
//   Stream<List<ReportIssue>> getIssues();
// }

// // lib/data/repositories/firebase_report_issue_repository.dart
// class FirebaseReportIssueRepository implements ReportIssueRepository {
//   final FirebaseReportIssueDataSource remoteDataSource;
//   final FirebaseAuth auth;

//   FirebaseReportIssueRepository({
//     required this.remoteDataSource,
//     required this.auth,
//   });

//   @override
//   Future<void> addIssue(String issue) async {
//     final User? currentUser = auth.currentUser;
//     if (currentUser == null) {
//       throw Exception('User not authenticated');
//     }

//     final issueModel = ReportIssueModel(
//       id: '', // ID will be generated by Firestore
//       issue: issue,
//       userId: currentUser.uid,
//     );

//     await remoteDataSource.addIssue(issueModel);
//   }

//   @override
//   Stream<List<ReportIssue>> getIssues() {
//     final User? currentUser = auth.currentUser;
//     if (currentUser == null) {
//       return Stream.error('User not authenticated');
//     }

//     return remoteDataSource.getIssues(currentUser.uid);
//   }
// }

// // lib/domain/usecases/submit_issue_usecase.dart
// class SubmitIssueUseCase {
//   final ReportIssueRepository repository;

//   SubmitIssueUseCase(this.repository);

//   Future<void> call(String issue) => repository.addIssue(issue);
// }

// // lib/domain/usecases/get_issues_usecase.dart
// class GetIssuesUseCase {
//   final ReportIssueRepository repository;

//   GetIssuesUseCase(this.repository);

//   Stream<List<ReportIssue>> call() => repository.getIssues();
// }

// // lib/presentation/bloc/report_issue_bloc.dart
// abstract class ReportIssueEvent {}

// class SelectIssueEvent extends ReportIssueEvent {
//   final String issue;
//   SelectIssueEvent(this.issue);
// }

// class SubmitIssueEvent extends ReportIssueEvent {}

// class LoadIssuesEvent extends ReportIssueEvent {}

// class ReportIssueState {
//   final String? selectedIssue;
//   final List<ReportIssue> issues;
//   final String? error;
//   final bool isLoading;

//   ReportIssueState({
//     this.selectedIssue,
//     this.issues = const [],
//     this.error,
//     this.isLoading = false,
//   });

//   ReportIssueState copyWith({
//     String? selectedIssue,
//     List<ReportIssue>? issues,
//     String? error,
//     bool? isLoading,
//   }) {
//     return ReportIssueState(
//       selectedIssue: selectedIssue ?? this.selectedIssue,
//       issues: issues ?? this.issues,
//       error: error,
//       isLoading: isLoading ?? this.isLoading,
//     );
//   }
// }

// class ReportIssueBloc extends Bloc<ReportIssueEvent, ReportIssueState> {
//   final SubmitIssueUseCase submitIssue;
//   final GetIssuesUseCase getIssues;

//   ReportIssueBloc({
//     required this.submitIssue,
//     required this.getIssues,
//   }) : super(ReportIssueState()) {
//     on<SelectIssueEvent>((event, emit) {
//       emit(state.copyWith(
//         selectedIssue: event.issue,
//         error: null,
//       ));
//     });

//     on<SubmitIssueEvent>((event, emit) async {
//       if (state.selectedIssue == null) {
//         emit(state.copyWith(error: 'Please select an issue'));
//         return;
//       }

//       emit(state.copyWith(isLoading: true, error: null));

//       try {
//         await submitIssue(state.selectedIssue!);
//         emit(state.copyWith(
//           selectedIssue: null,
//           isLoading: false,
//         ));
//       } catch (e) {
//         emit(state.copyWith(
//           error: e.toString(),
//           isLoading: false,
//         ));
//       }
//     });

//     on<LoadIssuesEvent>((event, emit) async {
//       emit(state.copyWith(isLoading: true, error: null));
      
//       await emit.forEach<List<ReportIssue>>(
//         getIssues(),
//         onData: (issues) => state.copyWith(
//           issues: issues,
//           isLoading: false,
//           error: null,
//         ),
//         onError: (error, stackTrace) => state.copyWith(
//           error: error.toString(),
//           isLoading: false,
//         ),
//       );
//     });
//   }
// }

// // lib/di/injection_container.dart
// final GetIt sl = GetIt.instance;

// Future<void> init() async {
//   // Bloc
//   sl.registerFactory(
//     () => ReportIssueBloc(
//       submitIssue: sl(),
//       getIssues: sl(),
//     ),
//   );

//   // Use cases
//   sl.registerLazySingleton(() => SubmitIssueUseCase(sl()));
//   sl.registerLazySingleton(() => GetIssuesUseCase(sl()));

//   // Repository
//   sl.registerLazySingleton<ReportIssueRepository>(
//     () => FirebaseReportIssueRepository(
//       remoteDataSource: sl(),
//       auth: FirebaseAuth.instance,
//     ),
//   );

//   // Data sources
//   sl.registerLazySingleton<ReportIssueRemoteDataSource>(
//     () => FirebaseReportIssueDataSource(
//       firestore: FirebaseFirestore.instance,
//     ),
//   );
// }
// // lib/presentation/pages/home_page.dart
// class ReportViewPage extends StatelessWidget {
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text('Issue Reporter'),
//       ),
//       body: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.stretch,
//           children: [
//             Card(
//               child: ListTile(
//                 leading: const Icon(Icons.report_problem),
//                 title: const Text('Report New Issue'),
//                 subtitle: const Text('Submit a new issue report'),
//                 onTap: () => Navigator.push(
//                   context,
//                   MaterialPageRoute(builder: (_) => ReportIssuePage()),
//                 ),
//               ),
//             ),
//             const SizedBox(height: 16),
//             Card(
//               child: ListTile(
//                 leading: const Icon(Icons.list),
//                 title: const Text('View My Issues'),
//                 subtitle: const Text('See all your reported issues'),
//                 onTap: () => Navigator.push(
//                   context,
//                   MaterialPageRoute(builder: (_) => ReportedIssuesPage()),
//                 ),
//               ),
//             ),
//             const SizedBox(height: 16),
//             Card(
//               child: ListTile(
//                 leading: const Icon(Icons.analytics),
//                 title: const Text('Issue Statistics'),
//                 subtitle: const Text('View issue reporting analytics'),
//                 onTap: () => Navigator.push(
//                   context,
//                   MaterialPageRoute(builder: (_) => IssueStatisticsPage()),
//                 ),
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }

// // lib/presentation/pages/reported_issues_page.dart
// class ReportedIssuesPage extends StatelessWidget {
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text('My Reported Issues'),
//         actions: [
//           IconButton(
//             icon: const Icon(Icons.filter_list),
//             onPressed: () => _showFilterDialog(context),
//           ),
//         ],
//       ),
//       body: BlocProvider(
//         create: (context) => sl<ReportIssueBloc>()..add(LoadIssuesEvent()),
//         child: BlocBuilder<ReportIssueBloc, ReportIssueState>(
//           builder: (context, state) {
//             if (state.isLoading) {
//               return const Center(child: CircularProgressIndicator());
//             }

//             if (state.error != null) {
//               return Center(child: Text(state.error!),);
//             }

//             if (state.issues.isEmpty) {
//               return const Center(
//                 child: Column(
//                   mainAxisAlignment: MainAxisAlignment.center,
//                   children: [
//                     Icon(Icons.inbox, size: 64, color: Colors.grey),
//                     SizedBox(height: 16),
//                     Text('No issues reported yet'),
//                   ],
//                 ),
//               );
//             }

//             return ListView.builder(
//               itemCount: state.issues.length,
//               itemBuilder: (context, index) {
//                 final issue = state.issues[index];
//                 return IssueCard(issue: issue);
//               },
//             );
//           },
//         ),
//       ),
//       floatingActionButton: FloatingActionButton(
//         onPressed: () => Navigator.push(
//           context,
//           MaterialPageRoute(builder: (_) => ReportIssuePage()),
//         ),
//         child: const Icon(Icons.add),
//       ),
//     );
//   }

//   void _showFilterDialog(BuildContext context) {
//     showDialog(
//       context: context,
//       builder: (context) => AlertDialog(
//         title: const Text('Filter Issues'),
//         content: Column(
//           mainAxisSize: MainAxisSize.min,
//           children: [
//             ListTile(
//               title: const Text('All Issues'),
//               leading: const Icon(Icons.all_inbox),
//               onTap: () => Navigator.pop(context),
//             ),
//             ListTile(
//               title: const Text('Last 7 Days'),
//               leading: const Icon(Icons.calendar_today),
//               onTap: () => Navigator.pop(context),
//             ),
//             ListTile(
//               title: const Text('Resolved'),
//               leading: const Icon(Icons.check_circle),
//               onTap: () => Navigator.pop(context),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }

// // lib/presentation/widgets/issue_card.dart
// class IssueCard extends StatelessWidget {
//   final ReportIssue issue;

//   const IssueCard({required this.issue});

//   @override
//   Widget build(BuildContext context) {
//     return Card(
//       margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
//       child: ExpansionTile(
//         leading: _getIssueIcon(issue.issue),
//         title: Text(issue.issue),
//         subtitle: Text(
//           'Reported on: ${_formatDate(issue.timestamp)}',
//           style: Theme.of(context).textTheme.bodySmall,
//         ),
//         children: [
//           Padding(
//             padding: const EdgeInsets.all(16.0),
//             child: Row(
//               mainAxisAlignment: MainAxisAlignment.spaceAround,
//               children: [
//                 _ActionButton(
//                   icon: Icons.edit,
//                   label: 'Edit',
//                   onPressed: () {},
//                 ),
//                 _ActionButton(
//                   icon: Icons.copy,
//                   label: 'Duplicate',
//                   onPressed: () {},
//                 ),
//                 _ActionButton(
//                   icon: Icons.delete,
//                   label: 'Delete',
//                   onPressed: () => _confirmDelete(context),
//                 ),
//               ],
//             ),
//           ),
//         ],
//       ),
//     );
//   }

//   Icon _getIssueIcon(String issueType) {
//     switch (issueType) {
//       case 'App Crashes':
//         return const Icon(Icons.error, color: Colors.red);
//       case 'Login Issues':
//         return const Icon(Icons.lock, color: Colors.orange);
//       case 'Payment Problems':
//         return const Icon(Icons.payment, color: Colors.red);
//       case 'Slow Performance':
//         return const Icon(Icons.speed, color: Colors.orange);
//       case 'Feature Request':
//         return const Icon(Icons.lightbulb, color: Colors.blue);
//       default:
//         return const Icon(Icons.help, color: Colors.grey);
//     }
//   }

//   String _formatDate(DateTime? date) {
//     if (date == null) return 'Unknown date';
//     return '${date.day}/${date.month}/${date.year}';
//   }

//   void _confirmDelete(BuildContext context) {
//     showDialog(
//       context: context,
//       builder: (context) => AlertDialog(
//         title: const Text('Delete Issue'),
//         content: const Text('Are you sure you want to delete this issue?'),
//         actions: [
//           TextButton(
//             onPressed: () => Navigator.pop(context),
//             child: const Text('Cancel'),
//           ),
//           TextButton(
//             onPressed: () {
//               // TODO: Implement delete functionality
//               Navigator.pop(context);
//             },
//             style: TextButton.styleFrom(foregroundColor: Colors.red),
//             child: const Text('Delete'),
//           ),
//         ],
//       ),
//     );
//   }
// }

// // lib/presentation/widgets/action_button.dart
// class _ActionButton extends StatelessWidget {
//   final IconData icon;
//   final String label;
//   final VoidCallback onPressed;

//   const _ActionButton({
//     required this.icon,
//     required this.label,
//     required this.onPressed,
//   });

//   @override
//   Widget build(BuildContext context) {
//     return InkWell(
//       onTap: onPressed,
//       child: Column(
//         mainAxisSize: MainAxisSize.min,
//         children: [
//           Icon(icon),
//           const SizedBox(height: 4),
//           Text(label, style: Theme.of(context).textTheme.bodySmall),
//         ],
//       ),
//     );
//   }
// }

// // lib/presentation/pages/issue_statistics_page.dart
// class IssueStatisticsPage extends StatelessWidget {
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text('Issue Statistics'),
//       ),
//       body: BlocProvider(
//         create: (context) => sl<ReportIssueBloc>()..add(LoadIssuesEvent()),
//         child: BlocBuilder<ReportIssueBloc, ReportIssueState>(
//           builder: (context, state) {
//             if (state.isLoading) {
//               return const Center(child: CircularProgressIndicator());
//             }

//             if (state.error != null) {
//               return Center(child: ErrorMessage(message: state.error!));
//             }

//             return SingleChildScrollView(
//               padding: const EdgeInsets.all(16.0),
//               child: Column(
//                 crossAxisAlignment: CrossAxisAlignment.start,
//                 children: [
//                   _StatisticCard(
//                     title: 'Total Issues',
//                     value: state.issues.length.toString(),
//                     icon: Icons.list_alt,
//                   ),
//                   const SizedBox(height: 16),
//                   _IssueTypeDistribution(issues: state.issues),
//                   const SizedBox(height: 16),
//                   _MonthlyTrend(issues: state.issues),
//                 ],
//               ),
//             );
//           },
//         ),
//       ),
//     );
//   }
// }

// // lib/presentation/widgets/statistic_card.dart
// class _StatisticCard extends StatelessWidget {
//   final String title;
//   final String value;
//   final IconData icon;

//   const _StatisticCard({
//     required this.title,
//     required this.value,
//     required this.icon,
//   });

//   @override
//   Widget build(BuildContext context) {
//     return Card(
//       child: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: Row(
//           children: [
//             Icon(icon, size: 48, color: Theme.of(context).primaryColor),
//             const SizedBox(width: 16),
//             Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 Text(title, style: Theme.of(context).textTheme.titleMedium),
//                 Text(value, style: Theme.of(context).textTheme.headlineMedium),
//               ],
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }

// // lib/presentation/widgets/issue_type_distribution.dart
// class _IssueTypeDistribution extends StatelessWidget {
//   final List<ReportIssue> issues;

//   const _IssueTypeDistribution({required this.issues});

//   @override
//   Widget build(BuildContext context) {
//     return Card(
//       child: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: [
//             Text(
//               'Issue Type Distribution',
//               style: Theme.of(context).textTheme.titleLarge,
//             ),
//             const SizedBox(height: 16),
//             SizedBox(
//               height: 200,
//               child: _buildChart(context),
//             ),
//           ],
//         ),
//       ),
//     );
//   }

//   Widget _buildChart(BuildContext context) {
//     // Calculate distribution
//     final distribution = <String, int>{};
//     for (var issue in issues) {
//       distribution[issue.issue] = (distribution[issue.issue] ?? 0) + 1;
//     }

//     return ListView.builder(
//       itemCount: distribution.length,
//       itemBuilder: (context, index) {
//         final type = distribution.keys.elementAt(index);
//         final count = distribution[type]!;
//         final percentage = (count / issues.length * 100).toStringAsFixed(1);

//         return Padding(
//           padding: const EdgeInsets.symmetric(vertical: 8.0),
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.start,
//             children: [
//               Text('$type ($percentage%)'),
//               const SizedBox(height: 4),
//               LinearProgressIndicator(
//                 value: count / issues.length,
//                 backgroundColor: Colors.grey[200],
//               ),
//             ],
//           ),
//         );
//       },
//     );
//   }
// }